name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  actions: read  # Required to check Quality Assurance workflow status

jobs:
  release:
    name: Create Release with Artifacts
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Wait for security workflows
        run: |
          set -euo pipefail

          echo "🔍 Waiting for security workflows to complete for commit ${{ github.sha }}"
          echo "⚠️  This prevents releases until all blocking security checks pass"

          # Maximum wait time: 15 minutes
          max_wait=900
          wait_time=0
          check_interval=30

          # Workflows to wait for
          workflows=("Quality Assurance" "Security Scanning")

          while [ $wait_time -lt $max_wait ]; do
            all_completed=true

            for workflow in "${workflows[@]}"; do
              # Get workflow runs for this commit
              runs=$(gh api repos/${{ github.repository }}/actions/runs \
                --jq ".workflow_runs[] | select(.head_sha == \"${{ github.sha }}\" and .name == \"$workflow\")")

              if [ -z "$runs" ]; then
                echo "⏳ No '$workflow' workflow found yet, waiting ${check_interval}s..."
                all_completed=false
                break
              fi

              # Get the status and conclusion
              status=$(echo "$runs" | jq -r '.status' | head -1)
              conclusion=$(echo "$runs" | jq -r '.conclusion' | head -1)

              echo "📋 $workflow status: $status, conclusion: $conclusion"

              if [ "$status" = "completed" ]; then
                if [ "$conclusion" != "success" ]; then
                  echo "❌ $workflow failed with conclusion: $conclusion"
                  echo "🚫 Blocking release creation due to security check failures"
                  exit 1
                fi
              else
                echo "⏳ $workflow still running ($status)..."
                all_completed=false
                break
              fi
            done

            if [ "$all_completed" = true ]; then
              echo "✅ All security workflows completed successfully"
              echo "🚀 Proceeding with release creation"
              break
            fi

            sleep $check_interval
            wait_time=$((wait_time + check_interval))
          done

          if [ $wait_time -ge $max_wait ]; then
            echo "⏰ Timeout waiting for security workflows"
            echo "🚫 Blocking release creation due to timeout"
            exit 1
          fi
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Validate tag format
        run: |
          if [[ ! "${{ github.ref_name }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid tag format. Expected: v1.2.3"
            exit 1
          fi
          echo "✅ Valid semver tag: ${{ github.ref_name }}"

      - name: Generate release artifacts
        run: |
          set -euo pipefail

          # Generate checksums for installer scripts
          sha256sum install-security-controls.sh > install-security-controls.sh.sha256
          sha256sum uninstall-security-controls.sh > uninstall-security-controls.sh.sha256

          # Create combined checksums file
          cat > checksums.txt <<EOF
          # 1-Click GitHub Security ${{ github.ref_name }} - Release Checksums
          # Verify with: sha256sum -c checksums.txt

          EOF
          cat install-security-controls.sh.sha256 >> checksums.txt
          cat uninstall-security-controls.sh.sha256 >> checksums.txt

          # Display checksums for verification
          echo "📋 Generated checksums:"
          cat checksums.txt

      - name: Validate installer integrity
        run: |
          set -euo pipefail

          # Verify checksums
          sha256sum -c install-security-controls.sh.sha256
          sha256sum -c uninstall-security-controls.sh.sha256

          echo "✅ All integrity checks passed"

      - name: Create Release
        uses: softprops/action-gh-release@6cbd405e2c4e67a21c47fa9e383d020e4e28b836 # v2.3.3
        with:
          files: |
            install-security-controls.sh
            install-security-controls.sh.sha256
            uninstall-security-controls.sh
            uninstall-security-controls.sh.sha256
            checksums.txt
          generate_release_notes: true
          name: "1-Click GitHub Security ${{ github.ref_name }}"
          body: |
            ## 🛡️ 1-Click GitHub Security ${{ github.ref_name }}

            ### 📦 Quick Installation

            ```bash
            # Download and verify installer
            curl -O https://github.com/h4x0r/1-click-github-sec/releases/download/${{ github.ref_name }}/install-security-controls.sh
            curl -O https://github.com/h4x0r/1-click-github-sec/releases/download/${{ github.ref_name }}/install-security-controls.sh.sha256

            # Verify checksum (REQUIRED for security)
            sha256sum -c install-security-controls.sh.sha256

            # Install security controls
            chmod +x install-security-controls.sh
            ./install-security-controls.sh
            ```

            ### 🔐 Security Verification

            - ✅ All release artifacts include SHA256 checksums
            - ✅ Scripts validated for syntax and integrity
            - ✅ Generated from signed commits

            ### 📋 Release Artifacts

            | File | Purpose | Verification |
            |------|---------|--------------|
            | `install-security-controls.sh` | Main installer script with 4-mode signing support | Required checksum verification |
            | `install-security-controls.sh.sha256` | SHA256 checksum | Use with `sha256sum -c` |
            | `uninstall-security-controls.sh` | Removal script | Optional but recommended |
            | `uninstall-security-controls.sh.sha256` | SHA256 checksum | Use with `sha256sum -c` |
            | `checksums.txt` | Combined checksums | All files in one place |

            ### 📚 Documentation

            **[Complete Documentation →](https://h4x0r.github.io/1-click-github-sec/)**

            ---

            **🛡️ Always verify checksums before execution - this is critical for security!**
          draft: false
          prerelease: false

      - name: Update installation instructions in README
        run: |
          echo "🔄 README update suggestions:"
          echo "Consider updating README.md Quick Start section to reference this release:"
          echo "  curl -O https://github.com/h4x0r/1-click-github-sec/releases/download/${{ github.ref_name }}/install-security-controls.sh"
          echo "  curl -O https://github.com/h4x0r/1-click-github-sec/releases/download/${{ github.ref_name }}/install-security-controls.sh.sha256"